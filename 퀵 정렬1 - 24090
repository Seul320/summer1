주어진 입력값으로부터 정수 n과 k를 받음
리스트 A를 입력받아 정수로 변환하여 초기화함
QuickSort 알고리즘을 이용하여 리스트 A를 정렬하는 함수 quickSort를 정의
quickSort 함수 내부에서 리스트 A의 특정 부분을 정렬하는 partition 함수를 정의
partition 함수 내부에서는 리스트 A에서 피벗(pivot) 값을 기준으로 분할을 수행하고, k번째로 작은 두 개의 원소를 출력함
정렬된 리스트 A에서 k번째로 작은 두 개의 원소를 출력하거나, k번째로 작은 두 개의 원소가 없는 경우 -1을 출력함

sys.setrecursionlimit(10**4): 재귀 호출의 깊이 제한을 늘려주는 코드. ( 오버플로우 방지 )
sys.stdin.readline(): 입력을 더 효율적으로 받기 위해 사용하는 코드. 
n, k = map(int, input().split()): 입력으로 받은 두 개의 정수를 변수 n과 k에 매핑함. input().split()을 통해 입력을 공백을 기준으로 분리하고,
map(int, ...)을 사용하여 분리된 문자열을 정수로 변환
QuickSort : 리스트 A와 시작 인덱스 p, 끝 인덱스 r을 받고, 해당 범위를 기준으로 QuickSort를 수행함.
partition 함수: 리스트 A에서 피벗 값을 기준으로 좌우로 나누는 작업을 수행하며, k번째로 작은 두 개의 원소를 출력하는 부분이 있다.
 피벗 값과 비교하여 작은 값을 왼쪽으로, 큰 값을 오른쪽으로 이동.
출력: k번째로 작은 두 개의 원소를 찾으면 해당 값을 출력하고 프로그램을 종료. 만약 k번째로 작은 두 개의 원소를 찾지 못한 경우에는 -1을 출력
재귀 호출 및 탈출 조건: quickSort 함수와 partition 함수에서 재귀 호출이 됨. 정렬을 수행하고 나서도 k번째로 작은 원소를 찾았는지 조건을 확인하여 조건을 만족하면
출력 후 exit(0)을 통해 프로그램을 종료.

import sys
input = sys.setrecursionlimit(10**4)
sys.stdin.readline
n,k = map(int,input().split())
A = list(map(int,input().split()))
def quickSort(A,p,r):
    if p<r:
        q = partition(A,p,r)
        quickSort(A,p,q-1)
        quickSort(A,q+1,r)
def partition(A,p,r):
    global k
    x = A[r]
    i = p-1
    for j in range(p,r):
        if A[j]<=x:
            i+=1
            A[i],A[j] = A[j],A[i]
            k-=1
            if k == 0:
                print(A[i], A[j])
                break
    if i+1!=r:
        A[i+1],A[r] = A[r],A[i+1]
        k-=1
        if k == 0:
            print(A[i+1], A[r])
            exit(0)
    return i+1
quickSort(A,0,len(A)-1)
if k>0:
    print(-1)





