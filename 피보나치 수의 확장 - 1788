이 문제는 양수와 음수에 대한 피보나치 수열을 구해야 한다.
피보나치 수열은 이전 두 수를 더해서 다음 수를 만드는 규칙을 가지고 있다. 
이를 확장하여 양수와 음수 모두를 포함하는 피보나치 수열을 구할 수 있다. 
음수에 대한 피보나치 수열은 양수 피보나치 수열과 반대로 계산하며, 음수 인덱스에 대한 피보나치 수를 구하는 방법을 사용한다.

1. 입력 받은 수 N을 저장한다.
2. N의 절대값을 저장한 변수 absN을 선언하고, N이 음수인지 양수인지 판단한다.
3. absN의 피보나치 수열을 계산하기 위해 배열 fib를 초기화한다.
4. N이 음수인 경우,
   - absN이 짝수인 경우, 결과로 -1을 출력하고 종료한다.
   - absN이 홀수인 경우, 결과로 1을 출력하고 종료한다.
5. N이 0인 경우, 결과로 0을 출력하고 종료한다.
6. N이 양수인 경우,
   - 결과로 fib[absN]을 출력하고 종료한다.

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int pibo[1000001];
int mirrorpibo[1000001];        //음수 피보나치 저장용 배열
int n;

int main()
{
	pibo[0] = 0;
	pibo[1] = 1;
	mirrorpibo[0] = 0;
	mirrorpibo[1] = pibo[1] - mirrorpibo[0];    //pibo[-1]=pibo[1]-pibo[0]
	for (int i = 2; i < 1000001; i++)
	{
		pibo[i] = (pibo[i - 1] + pibo[i - 2]) % 1000000000;                   //오버플로우 방지를 위해 나머지로 저장
		mirrorpibo[i] = (mirrorpibo[i - 2] - mirrorpibo[i - 1]) % 1000000000; //오버플로우 방지를 위해 나머지로 저장
	}

	scanf("%d", &n);
	if (n > 0)
	{
		printf("1\n");
		printf("%d\n", pibo[n]);
	}
	else if (n == 0)
	{
		printf("0\n0\n");
	}
	else                                                                      //n이 음수인 경우
	{
		n = n - n - n;                                                        //계산을 위해 n을 양수로 돌려줌
		if (mirrorpibo[n] < 0)                                                //결과가 음수인 경우
		{
			printf("-1\n");
			mirrorpibo[n] = mirrorpibo[n] - mirrorpibo[n] - mirrorpibo[n];
			printf("%d\n", mirrorpibo[n]);
		}
		else                                                                  //결과가 양수인 경우
		{
			printf("1\n");
			printf("%d\n", mirrorpibo[n]);
		}
	}
	return 0;
}
